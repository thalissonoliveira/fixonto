//####### EXTENSÃO DA FIXTURE COM FEA2ONTO 2.O ##########

//####### WIZARD 1. FEA2ONTO 2.0 #########
wizard FeaToOntoFixtureParser
{
	guard: self.isTypeOf(LPS)
	title: 'Fixture - Fea2Onto 2.0'
	do {
		fixTure2(self);	
	}
}

//####### WIZARD 2. ONTO ANALYSER #########
wizard OntoAnalyser
{
	guard: self.isTypeOf(LPS)
	title: 'MMSC Analyser Fea2Onto 2.0'
	do {
		ontoAnalyserFixture();
	}
}


operation fixTure2(lps:LPS) {
	//#### Nessa etapa será montada a estrutura da LPS para que seja possível traduzir em ontologia ########\\
	var featToOntoFixture := new Native('fixture.owl.parser.FeaToOntoFixture');
	var factoryFixture := featToOntoFixture.getSplConceptFactory();
	var splFixture = factoryFixture.createSpl(lps.nome);
	
	splFixture = construirObjetoSPL(lps, factoryFixture, splFixture, featToOntoFixture);
	featToOntoFixture.run(splFixture);
}


operation construirObjetoSPL(lps:LPS, factoryFixture, splFixture, featToOntoFixture) {
	
	var raiz = lps.sistema;
 	var rootFixture = factoryFixture.createRootFeature(raiz.nome);
 	
 	featToOntoFixture.addToFixtureOracle(splFixture);
	
	splFixture.setSystem(rootFixture);
	preecherElementosCaracteristicaLpsFixture(raiz, rootFixture, factoryFixture, splFixture, featToOntoFixture);
	preencherElementosContextuaisLpsFixture(lps, factoryFixture, splFixture, featToOntoFixture);
	preencherRegrasLpsFixture(lps, factoryFixture, splFixture, featToOntoFixture);
		
	var elementoDoModelo;
	
	for (literal in lps.expressoes -> select(x|x.isTypeOf(ExpressaoRelacional))) {
//		 literal.nome.println();
	}
	
	return splFixture;
}

operation preencherRegrasLpsFixture(lps : LPS, factoryFixture, splFixture, featToOntoFixture) {
	var ruleFixture = null;

	for (regra in lps.regras) {
		if (regra.isTypeOf(RegraDeComposicao)) {
			ruleFixture = preencherRegraDeComposicao(regra, factoryFixture, splFixture, featToOntoFixture);
		} else if (regra.isTypeOf(RegraDeContexto)) {
			ruleFixture = preencherRegraDeContexto(regra, factoryFixture, splFixture, featToOntoFixture);
		} else {
			'[ERROR] - Erro ao criar nova Regra pela Fixture: regra do modelo é inválida.'.println();
			return;
		}
		
		splFixture.getRules.add(ruleFixture);
	}
}


operation preecherElementosCaracteristicaLpsFixture(caracteristica : Caracteristica, rootFixture, factoryFixture, splFixture, featToOntoFixture) {
	
	featToOntoFixture.addToFixtureOracle(rootFixture);
	
	var childFeatureFixture = null;
	var attributeFixture = null;
	
	splFixture.getElements().add(rootFixture);
	
	for (caracteristicaFilha in caracteristica.caracteristicaFilha) {
		childFeatureFixture = criarNovaCaracteristicaFixture(caracteristicaFilha, factoryFixture);
		splFixture.getElements().add(childFeatureFixture);
		rootFixture.getChildrenFeatures().add(childFeatureFixture);
		childFeatureFixture.setFatherFeature(rootFixture);
		splFixture.getElements().add(childFeatureFixture);
		featToOntoFixture.addToFixtureOracle(childFeatureFixture);
		
		for (atributo in caracteristicaFilha.atributo) {
			attributeFixture = factoryFixture.createAttribute(atributo.nome);
			attributeFixture.setFatherFeature(childFeatureFixture);
			childFeatureFixture.getAttributes().add(attributeFixture);
			splFixture.getElements().add(attributeFixture);
			featToOntoFixture.addToFixtureOracle(attributeFixture);
		}
		
		if (not caracteristicaFilha.caracteristicaFilha.isEmpty()) {
			splFixture = preecherElementosCaracteristicaLpsFixture(caracteristicaFilha, childFeatureFixture, factoryFixture, splFixture, featToOntoFixture);
		}
		
	}
	return splFixture;
}

operation preencherElementosContextuaisLpsFixture(lps:LPS, factoryFixture, splFixture, featToOntoFixture) {
	var contextRootFixture = null;
	var contextEntityFixture = null;
	var contextInfoFixture = null;

	for (raizDeContexto in lps.elementos -> select(x|x.isTypeOf(RaizDeContexto))) {
		contextRootFixture = factoryFixture.createContextRoot(raizDeContexto.nome);
		splFixture.getElements().add(contextRootFixture);
		featToOntoFixture.addToFixtureOracle(contextRootFixture);
		
		for (entidadeDeContexto in raizDeContexto.entidadesDeContexto) {
			contextEntityFixture = factoryFixture.createContextEntity(entidadeDeContexto.nome);
			contextEntityFixture.setFatherContextRoot(contextRootFixture);
			contextRootFixture.getContextEntities().add(contextEntityFixture);
			splFixture.getElements.add(contextEntityFixture);
			featToOntoFixture.addToFixtureOracle(contextEntityFixture);
		
			for (informacaoDeContexto in entidadeDeContexto.informacoesdeContexto) {
				contextInfoFixture = factoryFixture.createContextInfo(informacaoDeContexto.nome);
				contextInfoFixture.setFatherContextEntity(contextEntityFixture);
				contextEntityFixture.getContextInfos().add(contextInfoFixture);
				splFixture.getElements.add(contextInfoFixture);
				featToOntoFixture.addToFixtureOracle(contextInfoFixture);
			}
			
		}
		
	}
}


operation preencherRegraDeContexto(regraDeContexto: RegraDeContexto, factoryFixture, splFixture, featToOntoFixture) {
	var contextRuleFixture = null;
	var eventFixture = null;
	var actionFixture = null;
	
	contextRuleFixture = factoryFixture.createContextRule(regraDeContexto.nome);
	eventFixture = preencherEvento(regraDeContexto.evento, factoryFixture, splFixture, featToOntoFixture);
	actionFixture = preencherAcao(regraDeContexto.acao, factoryFixture, splFixture, featToOntoFixture);
	contextRuleFixture.setEvent(eventFixture);
	contextRuleFixture.setAction(actionFixture);
	
	return contextRuleFixture;
	
}

operation preencherAcao(acao: Acao, factoryFixture, splFixture, featToOntoFixture) {
	var actionFixture = null;
	if (acao.isTypeOf(AcaoLogico)) {
		actionFixture = factoryFixture.createLogicalAction(acao.nome);
		actionFixture.setLeftSideAction(preencherAcao(acao.ladoEsquerdoAcao, factoryFixture, splFixture, featToOntoFixture));
		actionFixture.setRightSideAction(preencherAcao(acao.ladoDireitoAcao, factoryFixture, splFixture, featToOntoFixture));
		actionFixture.setLogicalActionOperator(acao.operadorAcaoLogico.value);
		return actionFixture;
	} else if (acao.isTypeOf(LiteralAcao)) {
		actionFixture = factoryFixture.createActionLiteral(acao.nome);
		actionFixture.setPresence(acao.presenca.value);
		actionFixture.setfeaturedElement(featToOntoFixture.getElementByName(acao.elemento.nome));
		return actionFixture;
	} else if (acao.isTypeOf(Designar)) {
		actionFixture = factoryFixture.createDesignate(acao.nome);
		actionFixture.setValue(acao.valor);
		actionFixture.setAttribute(featToOntoFixture.getElementByName(acao.atributo.nome));
		actionFixture.setValueType(acao.tipoValor.value);
		return actionFixture;
	} else {
		return null;
	}
}

operation preencherEvento(evento: Evento, factoryFixture, splFixture, featToOntoFixture) {
	var eventFixture = null;
	if (evento.isTypeOf(EventoLogico)) {
		eventFixture = factoryFixture.createLogicalEvent(evento.nome);
		eventFixture.setLeftSideEvent(preencherEvento(evento.ladoEsquerdoEvento, factoryFixture, splFixture, featToOntoFixture));
		eventFixture.setRightSideEvent(preencherEvento(evento.ladoDireitoEvento, factoryFixture, splFixture, featToOntoFixture));
		eventFixture.setLogicalOperator(evento.operadorLogico.value);
		return eventFixture;
	} else if (evento.isTypeOf(EventoRelacional)) {
		eventFixture = factoryFixture.createRelationalEvent(evento.nome);
		eventFixture.setContextVariable(featToOntoFixture.getElementByName(evento.variavelDeContexto.nome));
		eventFixture.setRelationalOperator(evento.operadorRelacional.value);
		eventFixture.setValue(evento.valor);
		return eventFixture;
	} else {
		return null;
	}
}

operation preencherRegraDeComposicao(regraDeComposicao: RegraDeComposicao, factoryFixture, splFixture, featToOntoFixture) {
	var compositionRuleFixture = null;
	var antecedentFixture = null;
	var consequentFixture = null;
	
	compositionRuleFixture = factoryFixture.createCompositionRule(regraDeComposicao.nome);
	antecedentFixture = preencherAntecedente(regraDeComposicao.antecedente, factoryFixture, splFixture, featToOntoFixture);
	consequentFixture = preencherAntecedente(regraDeComposicao.consequente, factoryFixture, splFixture, featToOntoFixture);
	compositionRuleFixture.setAntecedent(antecedentFixture);
	compositionRuleFixture.setConsequent(consequentFixture);
	
	return compositionRuleFixture;
}

//TODO preencher a coleção de expressões. Só adiciona elementos em regras.
operation preencherAntecedente(antecedente : Antecedente, factoryFixture, splFixture, featToOntoFixture) {
	var antecedentFixture = null;
	if (antecedente.isTypeOf(ExpressaoLogica)) {
		antecedentFixture = factoryFixture.createLogicalExpression(antecedente.nome);
		antecedentFixture.setLeftSideComposition(preencherAntecedente(antecedente.ladoEsquerdoComposicao, factoryFixture, splFixture, featToOntoFixture));
		antecedentFixture.setRightSideComposition(preencherAntecedente(antecedente.ladoDireitoComposicao, factoryFixture, splFixture, featToOntoFixture));
		antecedentFixture.setLogicalOperator(antecedente.operadorLogico.value);
		return antecedentFixture;
	} else if (antecedente.isTypeOf(LiteralComposicao)) {
		antecedentFixture = factoryFixture.createCompositionLiteral(antecedente.nome);
		antecedentFixture.setPresence(antecedente.presenca.value);
		antecedentFixture.setFeaturedElement(featToOntoFixture.getElementByName(antecedente.elemento.nome));
		return antecedentFixture;
	} else if (antecedente.isTypeOf(ExpressaoRelacional)) {
		antecedentFixture = factoryFixture.createRelationalExpression(antecedente.nome);
		antecedentFixture.setExpressionVariable(featToOntoFixture.getElementByName(antecedente.variaveldaExpressao.nome));
		antecedentFixture.setRelationalOperator(antecedente.operadorRelacional.value);
		antecedentFixture.setValue(antecedente.valor);
		return antecedentFixture;
	} else {
		return null;
	}
}

//#### Método que realiza a análise da ontologia gerada a partir do MMSC
operation ontoAnalyserFixture() {
	var rulesAnalyser := new Native('fixture.owl.reasoner.RulesAnalyser');
	rulesAnalyser.run();
}

//############## MÉTODOS AUXILIARES AOS MÉTODOS PRINCIPAIS DO PARSER #####################
operation criarNovaCaracteristicaFixture(caracteristica : Caracteristica, factoryFixture) {
	if (caracteristica.isTypeOf(CaracteristicaMandatoria)) {
		return factoryFixture.createMandatoryFeature(caracteristica.nome);
	} else if (caracteristica.isTypeOf(CaracteristicaOpcional)) {
		return factoryFixture.createOptionalFeature(caracteristica.nome);
	} else if (caracteristica.isTypeOf(VariacaoDois)) {
		return factoryFixture.createVariationTwo(caracteristica.nome);
	} else if (caracteristica.isTypeOf(CaracteristicaAgrupada)) {
		return factoryFixture.createGroupedFeature(caracteristica.nome);
	} else {
		'[ERROR] - Erro ao criar nova Feature pela Fixture: característica do modelo é inválida.'.println();
		return null;
	}
}
	

